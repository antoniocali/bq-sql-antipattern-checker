[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bq-sql-antipattern-checker"
version = "0.1.0"
description = "BigQuery SQL antipattern checker for optimization and cost reduction"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "Platform Engineering Team"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Quality Assurance",
]
keywords = ["bigquery", "sql", "antipattern", "optimization", "cost-reduction"]
dependencies = [
    "db-dtypes~=1.2",
    "google-cloud-bigquery~=3.24",
    "jinja2~=3.1",
    "markupsafe~=2.1",
    "pandas~=2.1",
    "sqlglot~=22.2",
    "sqlparse~=0.4",
    "typer~=0.9",
    "pyyaml~=6.0",
    "rich~=13.0",
]

[project.urls]
Homepage = "https://github.com/justeattakeaway/bq-sql-antipattern-checker"
Repository = "https://github.com/justeattakeaway/bq-sql-antipattern-checker"
Issues = "https://github.com/justeattakeaway/bq-sql-antipattern-checker/issues"

[project.scripts]
bq-antipattern-checker = "bq_sql_antipattern_checker.main:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
bq_sql_antipattern_checker = ["templates/*.j2", "antipattern-config.yaml"]

[dependency-groups]
dev = [
    "ruff>=0.12.1",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "black>=24.0.0",
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "safety>=3.0.0",
    "interrogate>=1.5.0",
    "vulture>=2.11",
    "types-PyYAML>=6.0.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 100
src = ["src"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "W291", # trailing whitespace
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101", "PLR2004"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["bq_sql_antipattern_checker"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "google.cloud.*",
    "sqlglot.*",
    "sqlparse.*",
    "pandas.*",
    "db_dtypes.*",
]
ignore_missing_imports = true

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["bq_sql_antipattern_checker"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Bandit configuration (security linting)
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

# Interrogate configuration (docstring coverage)
[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

# Vulture configuration (dead code detection)
[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
exclude = ["*.py"]
ignore_decorators = ["@app.route", "@require_*"]
ignore_names = ["_*", "test_*"]
make_whitelist = true
